{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nlet ListaAlbunsComponent = class ListaAlbunsComponent {\n  get totalPaginas() {\n    return Math.ceil(this.registros.length / this.registrosPorPagina);\n  }\n  get paginas() {\n    return Array.from({\n      length: this.totalPaginas\n    }, (_, index) => index + 1);\n  }\n  constructor(photoService) {\n    this.photoService = photoService;\n    this.registros = [{\n      id: 1,\n      nome: 'João',\n      email: 'joao@example.com'\n    }, {\n      id: 2,\n      nome: 'Maria',\n      email: 'maria@example.com'\n    }, {\n      id: 3,\n      nome: 'José',\n      email: 'jose@example.com'\n    }\n    // Adicione mais registros conforme necessário\n    ];\n\n    this.registrosPorPagina = 10;\n    this.paginaAtual = 1;\n    this.title = '';\n    // fotos: Photo[] = []\n    this.fotos$ = new Observable();\n    // form\n    this.id = '';\n    this.photo = '';\n    this.url = '';\n    this.obterFotosCadastradas();\n  }\n  obterFotosCadastradas() {\n    this.fotos$ = this.photoService.obterFotos();\n  }\n  buttonClick() {\n    if (!this.photo || !this.title) return;\n    if (this.id) {\n      this.atualizar();\n      return;\n    }\n    this.photoService.cadastrarFoto({\n      title: this.title\n    }).subscribe(_ => this.obterFotosCadastradas());\n  }\n  atualizar() {\n    this.photoService.editarFoto({\n      id: parseInt(this.id),\n      title: this.title\n    }).subscribe(_ => this.obterFotosCadastradas());\n  }\n  preencherCampos(photo) {\n    this.id = photo.id.toString();\n    //this.url = photo.url;\n    this.title = photo.title;\n  }\n  remover(id) {\n    this.photoService.remover(id).subscribe(_ => this.obterFotosCadastradas());\n  }\n};\nListaAlbunsComponent = __decorate([Component({\n  selector: 'app-lista-albuns',\n  templateUrl: './lista-albuns.component.html',\n  styleUrls: ['./lista-albuns.component.scss']\n})], ListaAlbunsComponent);\nexport { ListaAlbunsComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAEzC,SAASC,UAAU,QAAQ,MAAM;AAQ1B,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAW/B,IAAIC,YAAY;IACd,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACC,SAAS,CAACC,MAAM,GAAG,IAAI,CAACC,kBAAkB,CAAC;EACnE;EAEA,IAAIC,OAAO;IACT,OAAOC,KAAK,CAACC,IAAI,CAAC;MAAEJ,MAAM,EAAE,IAAI,CAACJ;IAAY,CAAE,EAAE,CAACS,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC;EAC3E;EAYAC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IA5BhC,cAAS,GAAU,CACjB;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAkB,CAAE,EAClD;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAmB,CAAE,EACpD;MAAEF,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAkB;IAChD;IAAA,CACD;;IAED,uBAAkB,GAAW,EAAE;IAC/B,gBAAW,GAAW,CAAC;IAUvB,UAAK,GAAG,EAAE;IAEV;IACA,WAAM,GAAG,IAAIjB,UAAU,EAAW;IAElC;IACA,OAAE,GAAG,EAAE;IACP,UAAK,GAAG,EAAE;IACV,QAAG,GAAG,EAAE;IAGN,IAAI,CAACkB,qBAAqB,EAAE;EAC9B;EAEAA,qBAAqB;IACnB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACL,YAAY,CAACM,UAAU,EAAE;EAC9C;EAEAC,WAAW;IACT,IAAI,CAAC,IAAI,CAACC,KAAK,IAAI,CAAC,IAAI,CAACC,KAAK,EAC5B;IAEF,IAAI,IAAI,CAACR,EAAE,EAAE;MACX,IAAI,CAACS,SAAS,EAAE;MAChB;;IAGF,IAAI,CAACV,YAAY,CAACW,aAAa,CAAC;MAAEF,KAAK,EAAE,IAAI,CAACA;IAAK,CAAE,CAAC,CACnDG,SAAS,CAACf,CAAC,IAAI,IAAI,CAACO,qBAAqB,EAAE,CAAC;EACjD;EAEAM,SAAS;IACP,IAAI,CAACV,YAAY,CAACa,UAAU,CAAC;MAC3BZ,EAAE,EAAEa,QAAQ,CAAC,IAAI,CAACb,EAAE,CAAC;MAAEQ,KAAK,EAAE,IAAI,CAACA;KAAQ,CAAC,CAC3CG,SAAS,CAACf,CAAC,IAAI,IAAI,CAACO,qBAAqB,EAAE,CAAC;EACjD;EAEAW,eAAe,CAACP,KAAY;IAC1B,IAAI,CAACP,EAAE,GAAGO,KAAK,CAACP,EAAG,CAACe,QAAQ,EAAE;IAC9B;IACA,IAAI,CAACP,KAAK,GAAGD,KAAK,CAACC,KAAK;EAC1B;EAEAQ,OAAO,CAAChB,EAAU;IAChB,IAAI,CAACD,YAAY,CAACiB,OAAO,CAAChB,EAAE,CAAC,CAC1BW,SAAS,CAACf,CAAC,IAAI,IAAI,CAACO,qBAAqB,EAAE,CAAC;EACjD;CACD;AAlEYjB,oBAAoB,eALhCF,SAAS,CAAC;EACTiC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,GACWjC,oBAAoB,CAkEhC;SAlEYA,oBAAoB","names":["Component","Observable","ListaAlbunsComponent","totalPaginas","Math","ceil","registros","length","registrosPorPagina","paginas","Array","from","_","index","constructor","photoService","id","nome","email","obterFotosCadastradas","fotos$","obterFotos","buttonClick","photo","title","atualizar","cadastrarFoto","subscribe","editarFoto","parseInt","preencherCampos","toString","remover","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\linco\\Downloads\\desafio_frontend_teia-main\\desafio_frontend_teia-main\\src\\app\\lista-albuns\\lista-albuns.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Photo } from '../models/photo.model';\nimport { Observable } from 'rxjs';\nimport { PhotoService } from '../services/photo.service';\n\n@Component({\n  selector: 'app-lista-albuns',\n  templateUrl: './lista-albuns.component.html',\n  styleUrls: ['./lista-albuns.component.scss']\n})\nexport class ListaAlbunsComponent {\n  registros: any[] = [\n    { id: 1, nome: 'João', email: 'joao@example.com' },\n    { id: 2, nome: 'Maria', email: 'maria@example.com' },\n    { id: 3, nome: 'José', email: 'jose@example.com' },\n    // Adicione mais registros conforme necessário\n  ];\n\n  registrosPorPagina: number = 10;\n  paginaAtual: number = 1;\n\n  get totalPaginas(): number {\n    return Math.ceil(this.registros.length / this.registrosPorPagina);\n  }\n\n  get paginas(): number[] {\n    return Array.from({ length: this.totalPaginas }, (_, index) => index + 1);\n  }\n\n  title = '';\n\n  // fotos: Photo[] = []\n  fotos$ = new Observable<Photo[]>();\n\n  // form\n  id = '';\n  photo = '';\n  url = '';\n\n  constructor(private photoService: PhotoService) {\n    this.obterFotosCadastradas();\n  }\n\n  obterFotosCadastradas() {\n    this.fotos$ = this.photoService.obterFotos();\n  }\n\n  buttonClick() {\n    if (!this.photo || !this.title)\n      return;\n\n    if (this.id) {\n      this.atualizar();\n      return;\n    }\n\n    this.photoService.cadastrarFoto({ title: this.title })\n      .subscribe(_ => this.obterFotosCadastradas())\n  }\n\n  atualizar() {\n    this.photoService.editarFoto({\n      id: parseInt(this.id), title: this.title  })\n      .subscribe(_ => this.obterFotosCadastradas());\n  }\n\n  preencherCampos(photo: Photo) {\n    this.id = photo.id!.toString();\n    //this.url = photo.url;\n    this.title = photo.title;\n  }\n\n  remover(id: number) {\n    this.photoService.remover(id)\n      .subscribe(_ => this.obterFotosCadastradas());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}